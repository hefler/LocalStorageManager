{"name":"Localstoragemanager","tagline":"A simple wrapper for the localStorage browser API.","body":"LocalStorageManager\r\n===\r\n\r\nA simple wrapper for the localStorage browser API.\r\n\r\n## Usage ##\r\n\r\nJust add your CSS file into the <code>head</code> and test how your CSS will affect HTML elements.\r\n\r\n\t/** Create a new instance of LocalStorageManager\r\n\t*\t@param keyName\tA string for the key\r\n\t*\t@param data\t\tThe value of the key (an string or object)\r\n\t*\t@param version\t[optional] This is a parameter to test against a previous local saved version of the same key. So if the version is different than the local we overwrite it.\r\n\t*/\r\n\tvar lsm = new LocalStorageManager(keyName, data, [version]); \r\n\t\r\n\t/**\r\n\t*\tWrite to save data to localStorage (note: this is no merge, everything will be overwritten).\r\n\t*\t@paran data\tThe value of the key (an string or object)\r\n\t*\t@param keyName [optional] If no name is provided the value provided in the constructor will be used.\r\n\t*/\r\n\tlsm.write(data, keyName);\r\n\t\r\n\t/**\r\n\t*\tDeletes the key from localStorage.\r\n\t*\t@param keyName [optional] If no name is provided the value provided in the constructor will be used and flushed.\r\n\t*\t@return Returns true if the key was found and deleted.\r\n\t*/\r\n\tlsm.flush(keyName);\r\n\t/**\r\n\t*\tWrite to save data to localStorage (note: this is no merge, everything will be overwritten).\r\n\t*\t@param keyName [optional] If no name is provided the value provided in the constructor will be used.\r\n\t*\t@return Returns the key as an <code>object</code>.\r\n\t*/\r\n\tlsm.getObject(keyName);\r\n\r\n## Betaâ€¦ish ##\r\n \r\nThis is a working in progress and for sure there are improvements to be made.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}